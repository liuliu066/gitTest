package com.study.javaInfo;

/**
 * @author lwh
 * @description:
 *
总结
Java 中的静态变量和静态代码块是在类加载的时候就执行的，实例化对象时，先声明并实例化变量再执行构造函数。如果子类继承父类，则先执行父类的静态变量和静态代码块，再执行子类的静态变量和静态代码块。同样，接着在执行父类和子类非静态代码块和构造函数。
注意
（静态）变量和（静态）代码块的也是有执行顺序的，与代码书写的顺序一致。在（静态）代码块中可以使用（静态）变量，但是被使用的（静态）变量必须在（静态）代码块前面声明。
执行步骤
1、父类静态变量和静态代码块（先声明的先执行）;
2、子类静态变量和静态代码块（先声明的先执行）;
3、父类的变量和代码块（先声明的先执行）;
4、父类的构造函数；
5、子类的变量和代码块（先声明的先执行）;
6、子类的构造函数。
 * 1、执行顺序
 * 静态代码块>构造代码块>构造方法
 *
 * 原因：
 *
 * 静态代码块（static{}）在类加载的时候执行一次，是最早被执行的。
 * 构造代码块（{}内的部分）在每一次创建对象时执行，始终在构造方法前执行。
 * 构造方法在新建对象时调用（ 就是new的时候 ）。
 * 注意：
 *
 * 静态代码块在类加载的时候就执行，所以它的优先级高于入口main()方法。
 * 当三种形式不止一次出现，同优先级是按照先后顺序执行。
 * ――――――――――――――――
 *
 *
 * @date 2023/4/25 19:10
 */
public class javaInfo {

    private static String name;

    static {
        name="1";
    }

    public static void main(String[] args) {
        javaInfo javaInfo1 =new javaInfo();
        System.out.println(javaInfo1);
        System.out.println(javaInfo1);
    }






}
